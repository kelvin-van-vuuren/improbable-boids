// Generated by Improbable codegen. DO NOT EDIT!
// source: myschema.schema

#ifndef IMPROBABLE_SCHEMA_myschema_schema_4676459199623344917_INCLUDED
#define IMPROBABLE_SCHEMA_myschema_schema_4676459199623344917_INCLUDED

#include <improbable/worker/system/c_system.h>
#include <cstdint>

// ---------------------- Types ---------------------- 

struct Direction {
  static constexpr std::uint32_t kComponentId = 1002;

  double value;

  inline bool operator==(const Direction& other) const {
    return value == other.value;
  }

  inline bool operator!=(const Direction& other) const {
    return !operator==(other);
  }
};
static_assert(sizeof(Direction) == 8);

struct Velocity {
  static constexpr std::uint32_t kComponentId = 1001;

  double value;

  inline bool operator==(const Velocity& other) const {
    return value == other.value;
  }

  inline bool operator!=(const Velocity& other) const {
    return !operator==(other);
  }
};
static_assert(sizeof(Velocity) == 8);

#endif  // IMPROBABLE_SCHEMA_myschema_schema_4676459199623344917_INCLUDED